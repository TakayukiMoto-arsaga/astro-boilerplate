---
import { getCollection } from 'astro:content'
import { css } from '@/../styled-system/css'
import { Toc } from '@/components/toc/Toc.tsx'
import Layout from '@/layouts/Layout.astro'
import type { HeadPageProps, OgImage, Robots } from '@/layouts/head/types'

const post = Astro.props
const { Content } = await post.render()

const authors = await getCollection('authors')
const authorID = (post.data.author as { id: string }).id
const author = authors.find((author) => author.id === authorID)

const authorNameParts = [
  author?.data.name.last.formal,
  author?.data.name.middle.formal,
  author?.data.name.first.formal,
].filter(Boolean)
const authorName = authorNameParts.join(' ')

const headPage: HeadPageProps = {
  title: post.data.title,
  description: post.data.description,
  robots: post.data.robots as Robots,
  ogType: 'article',
  ogImage: (post.data.ogImage as OgImage) || '/src/assets/images/content/blog/ogp.webp',
  ogImageAlt: post.data.ogImageAlt || 'コンテンツです。',
  xCreator: author?.data.sns.xCreator as `@${string}`,
  author: typeof post.data.author === 'string' && post.data.author === '' ? '' : authorName,
}

export async function getStaticPaths() {
  // 本番用にビルドするときにのみ、isDraft: trueを含むエントリーを除外
  const posts = await getCollection('blog', ({ data }) => {
    return import.meta.env.PROD ? data.isDraft !== true : true
  })

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }))
}

const blogDetail = css({
  '& h2': {
    fontSize: '2.5rem',
  },
  '& h3': {
    fontSize: '2.2rem',
  },

  '& p': {
    fontSize: '1.5rem',
  },
})
---

<Layout headPage={headPage}>
  <img
    width={400}
    height={210}
    src={post.data.ogImage ? post.data.ogImage : '/src/assets/images/content/blog/ogp.webp'}
    alt={post.data.ogImageAlt ? post.data.ogImageAlt : 'コンテンツです'}
  />
  <h1>{post.data.title}</h1>
  <hr />
  <article class={blogDetail}>
    {/* 記事のタイトルにh1タグを使用するので、目次の見出しはh2タグから使ってください。 */}
    {
      /* MDXファイル内で最初に書かれている##の直上に、<Toc headings={getHeadings()} />を記述して目次を生成してください。 */
    }
    <Content
      components={{
        Toc,
      }}
    />
  </article>
</Layout>
