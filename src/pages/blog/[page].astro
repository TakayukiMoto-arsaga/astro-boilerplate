---
import { getCollection } from 'astro:content'
import Pagination from '@/components/pagination/Pagination.astro'
import Layout from '@/layouts/Layout.astro'
import type { AsideProps } from '@/layouts/aside/types'
import type { HeadPageProps } from '@/layouts/head/types'
import type { GetStaticPathsOptions } from 'astro'

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const posts = await getCollection('blog', ({ data }) => {
    // 本番用にビルドするときにのみ、isDraft: trueを含むエントリーを除外
    return import.meta.env.PROD ? data.isDraft !== true : true
  })

  return paginate(posts, { pageSize: 5 })
}

const category = await getCollection('blog', ({ data }) => {
  // 本番用にビルドするときにのみ、isDraft: trueを含むエントリーを除外
  return import.meta.env.PROD ? data.isDraft !== true : true
}).then((posts) => posts.map((post) => post.data.categories))

const { page } = Astro.props

const headPage: HeadPageProps = {
  title: 'blog一覧PageTitle',
  description: 'blog一覧ページの説明です。',
  robots: 'all',
  ogType: 'website',
  ogImage: '/src/assets/images/content/blog/ogp.webp',
  ogImageAlt: 'ogImageAlt',
  xCreator: '@xCreator',
  author: 'author',
}

const aside: AsideProps = {
  category: category,
}
---

<Layout headPage={headPage} aside={aside}>
  <h1>Page {page.currentPage}</h1>
  {
    page.data.map((post) => (
      <a href={`/blog/${post.slug}/`}>
        <img
          width={400}
          height={210}
          src={post.data.ogImage ? post.data.ogImage : '/src/assets/images/content/blog/ogp.webp'}
          alt={post.data.ogImageAlt ? post.data.ogImageAlt : 'コンテンツです'}
        />
        <h1>{post.data.title}</h1>
      </a>
    ))
  }
  {
    page.total > page.size && (
      <Pagination pathName='blog' currentPage={page.currentPage} lastPage={page.lastPage} />
    )
  }
</Layout>
