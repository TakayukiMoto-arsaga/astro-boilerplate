---
import { BASE_URL } from '@/constants/url'
import Layout from '@/layouts/Layout.astro'
import type { AsideProps } from '@/layouts/aside/types'
import type { HeadPageProps, OgImage, Robots } from '@/layouts/head/types'
import BlogSlug from '@/templates/blog/slug/BlogSlug.astro'
import { getAuthor, getCategories, getSlugPath } from '@/utils/content.ts'
import { getLastSegment } from '@/utils/path'
import { getEntry, render } from 'astro:content'

const PATH_NAME = 'blog'
const lastSegment = getLastSegment(Astro.url.pathname)
const slugPost = await getEntry(PATH_NAME, lastSegment)
if (!slugPost) return Astro.redirect('/astro-boilerplate/404/')
const { Content } = await render(slugPost)
const DEFAULT_POST = {
  title: '',
  description: '',
  robots: 'all',
  ogType: 'article',
  ogImage: '',
  ogImageAlt: '',
  xCreator: '',
  author: '',
  publishedDate: '',
  updatedDate: '',
  tags: undefined
} as const
const post = slugPost?.data ?? DEFAULT_POST
const category = await getCategories(PATH_NAME)
const authorID =
  typeof post.author === 'object' && post.author !== null ? post.author.id : undefined
const { author, authorName } = await getAuthor(authorID)

export async function getStaticPaths() {
  // TODO: PATH_NAMEを変更したときは、以下の'blog'も変更してください。
  return getSlugPath('blog')
}

const headPage: HeadPageProps = {
  title: `${post.title} - ${PATH_NAME}`,
  description: post.description,
  robots: post.robots as Robots,
  ogType: 'article',
  ogImage: post.ogImage
    ? (`${BASE_URL}${post.ogImage}` as OgImage)
    : `ogp/${PATH_NAME}/general.webp`,
  ogImageAlt: post.ogImageAlt || 'コンテンツです。',
  xCreator: author?.sns.xCreator as `@${string}`,
  author: typeof post.author === 'string' && post.author === '' ? '' : authorName
}

const aside: AsideProps = {
  pathName: PATH_NAME,
  category: category
}
---

<Layout headPage={headPage} aside={aside}>
  <BlogSlug post={post} pathName={PATH_NAME} Content={Content} />
</Layout>
