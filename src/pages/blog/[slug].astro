---
import { getCollection } from 'astro:content'
import Layout from '@/layouts/Layout.astro'
import type { AsideProps } from '@/layouts/aside/types'
import type { HeadPageProps, OgImage, Robots } from '@/layouts/head/types'
import BlogSlug from '@/templates/blog/slug/BlogSlug.astro'
import { getCategories } from '@/utils/content.ts'

const PATH_NAME = 'blog'
const post = Astro.props.data
const category = await getCategories(PATH_NAME)

const { Content } = await Astro.props.render()

const authors = await getCollection('authors')
const authorID = (post.author as { id: string }).id
const author = authors.find((author) => author.id === authorID)?.data

const authorNameParts = [
  author?.name.last.formal,
  author?.name.middle.formal,
  author?.name.first.formal,
].filter(Boolean)
const authorName = authorNameParts.join(' ')

export async function getStaticPaths() {
  // TODO: PATH_NAMEを変更したときは、以下の'blog'も変更してください。
  const posts = await getCollection('blog', ({ data }) => {
    // 本番用にビルドするときにのみ、isDraft: trueを含むエントリーを除外
    return import.meta.env.PROD ? data.isDraft !== true : true
  })

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }))
}

const headPage: HeadPageProps = {
  title: `${post.title} - ${PATH_NAME}`,
  description: post.description,
  robots: post.robots as Robots,
  ogType: 'article',
  ogImage: (post.ogImage as OgImage) || `/src/assets/images/content/${PATH_NAME}/ogp.webp`,
  ogImageAlt: post.ogImageAlt || 'コンテンツです。',
  xCreator: author?.sns.xCreator as `@${string}`,
  author: typeof post.author === 'string' && post.author === '' ? '' : authorName,
}

const aside: AsideProps = {
  pathName: PATH_NAME,
  category: category,
}
---

<Layout headPage={headPage} aside={aside}>
  <BlogSlug post={post} pathName={PATH_NAME} Content={Content} />
</Layout>
